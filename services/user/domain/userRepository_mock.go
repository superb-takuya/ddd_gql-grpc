// Code generated by MockGen. DO NOT EDIT.
// Source: domain/userRepository.go

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserRepository) Create(attr UserAttributes) (UserUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", attr)
	ret0, _ := ret[0].(UserUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserRepositoryMockRecorder) Create(attr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), attr)
}

// Update mocks base method
func (m *MockUserRepository) Update(id UserUUID, attr UserAttributes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, attr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserRepositoryMockRecorder) Update(id, attr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), id, attr)
}

// Delete mocks base method
func (m *MockUserRepository) Delete(id UserUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), id)
}

// MockUserDataAccessor is a mock of UserDataAccessor interface
type MockUserDataAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataAccessorMockRecorder
}

// MockUserDataAccessorMockRecorder is the mock recorder for MockUserDataAccessor
type MockUserDataAccessorMockRecorder struct {
	mock *MockUserDataAccessor
}

// NewMockUserDataAccessor creates a new mock instance
func NewMockUserDataAccessor(ctrl *gomock.Controller) *MockUserDataAccessor {
	mock := &MockUserDataAccessor{ctrl: ctrl}
	mock.recorder = &MockUserDataAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDataAccessor) EXPECT() *MockUserDataAccessorMockRecorder {
	return m.recorder
}

// create mocks base method
func (m *MockUserDataAccessor) create(attr UserAttributes) (UserUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "create", attr)
	ret0, _ := ret[0].(UserUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// create indicates an expected call of create
func (mr *MockUserDataAccessorMockRecorder) create(attr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "create", reflect.TypeOf((*MockUserDataAccessor)(nil).create), attr)
}

// update mocks base method
func (m *MockUserDataAccessor) update(id UserUUID, attr UserAttributes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "update", id, attr)
	ret0, _ := ret[0].(error)
	return ret0
}

// update indicates an expected call of update
func (mr *MockUserDataAccessorMockRecorder) update(id, attr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "update", reflect.TypeOf((*MockUserDataAccessor)(nil).update), id, attr)
}

// delete mocks base method
func (m *MockUserDataAccessor) delete(id UserUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// delete indicates an expected call of delete
func (mr *MockUserDataAccessorMockRecorder) delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "delete", reflect.TypeOf((*MockUserDataAccessor)(nil).delete), id)
}

// emailAlreadyUsedCreate mocks base method
func (m *MockUserDataAccessor) emailAlreadyUsedCreate(email Email) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "emailAlreadyUsedCreate", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// emailAlreadyUsedCreate indicates an expected call of emailAlreadyUsedCreate
func (mr *MockUserDataAccessorMockRecorder) emailAlreadyUsedCreate(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "emailAlreadyUsedCreate", reflect.TypeOf((*MockUserDataAccessor)(nil).emailAlreadyUsedCreate), email)
}

// emailAlreadyUsedUpdate mocks base method
func (m *MockUserDataAccessor) emailAlreadyUsedUpdate(id UserUUID, email Email) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "emailAlreadyUsedUpdate", id, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// emailAlreadyUsedUpdate indicates an expected call of emailAlreadyUsedUpdate
func (mr *MockUserDataAccessorMockRecorder) emailAlreadyUsedUpdate(id, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "emailAlreadyUsedUpdate", reflect.TypeOf((*MockUserDataAccessor)(nil).emailAlreadyUsedUpdate), id, email)
}
